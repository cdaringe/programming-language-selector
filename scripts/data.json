{
  "javascript": {
    "modeled fallibility": {
      "traitScalar": 3,
      "comment": "present in exceptions, null, undefined, cb sigs. extremely non-uniform, but present",
      "value": 1,
      "category": "correctness"
    },
    "memory safety - compile time": {
      "traitScalar": 3,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "memory safety - run time": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "collection transforms (e.g. functional operators, functor, iter streams/xforms, etc)": {
      "traitScalar": 2,
      "comment": "basic functional ops and iter capabilities",
      "value": 2,
      "category": "correctness"
    },
    "laziness": {
      "traitScalar": 1,
      "comment": "generators",
      "value": 1,
      "category": "correctness"
    },
    "types - existant": {
      "traitScalar": 3,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "types - type mapping": {
      "traitScalar": 1,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "types - inference": {
      "traitScalar": 2,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "types - alegbraic": {
      "traitScalar": 2,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "types - completeness": {
      "traitScalar": 3,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "types - advanced (dependent, hkt, etc)": {
      "traitScalar": 1,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "types - structual": {
      "traitScalar": 1,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "types - nominal": {
      "traitScalar": 1,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "paradigm - functional": {
      "traitScalar": 0,
      "comment": "",
      "value": 2,
      "category": "developer ux"
    },
    "paradigm - procedural": {
      "traitScalar": 0,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "paradigm - oop": {
      "traitScalar": 0,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "meta-programming": {
      "traitScalar": 1,
      "comment": "",
      "value": 0,
      "category": "developer ux"
    },
    "debugger": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - syntax": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - launch": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - completions": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - task execution": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "learning - teachable": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "learning - accessible": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "project - hydration/bootstrap": {
      "traitScalar": 1,
      "comment": "clone, npm i, npm start",
      "value": 3,
      "category": "developer ux"
    },
    "efficent machine code": {
      "traitScalar": 3,
      "comment": "",
      "value": "na",
      "category": "performance"
    },
    "efficent bytecode code": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "performance"
    },
    "abstractions - memory cost": {
      "traitScalar": 3,
      "comment": "astractions often cost objects",
      "value": 1,
      "category": "performance"
    },
    "abstractions - cpu cost": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "performance"
    },
    "common compile duration": {
      "traitScalar": 1,
      "comment": "",
      "value": "na",
      "category": "performance"
    },
    "batteries - standard modules": {
      "traitScalar": 1,
      "comment": "3p libs oft required",
      "value": 1,
      "category": "developer ux"
    },
    "batteries - testing": {
      "traitScalar": 1,
      "comment": "none, but clear 3p winners",
      "value": 1,
      "category": "developer ux"
    },
    "batteries - project/repo management": {
      "traitScalar": 2,
      "comment": "unmatched, npm + scripts + deps",
      "value": 3,
      "category": "developer ux"
    },
    "batteries - packaging & distribution": {
      "traitScalar": 3,
      "comment": "unmatched",
      "value": 3,
      "category": "ecosystem"
    },
    "module abundance": {
      "traitScalar": 3,
      "comment": "unmatched",
      "value": 3,
      "category": "ecosystem"
    },
    "support - community": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "community"
    },
    "support - enterprise": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "community"
    },
    "tooling - builds": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "tooling - ci/cd": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "tooling - asset management": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "maturity": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "hiring availability": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "hiring"
    }
  },
  "typescript": {
    "modeled fallibility": {
      "traitScalar": 3,
      "comment": "present in exceptions, null, undefined, cb sigs. extremely non-uniform, but present. however, strict mode allows for greatly improved detection, even if modeling not uniform",
      "value": 2,
      "category": "correctness"
    },
    "memory safety - compile time": {
      "traitScalar": 3,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "memory safety - run time": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "collection transforms (e.g. functional operators, functor, iter streams/xforms, etc)": {
      "traitScalar": 2,
      "comment": "basic functional ops and iter capabilities",
      "value": 2,
      "category": "correctness"
    },
    "laziness": {
      "traitScalar": 1,
      "comment": "generators",
      "value": 1,
      "category": "correctness"
    },
    "types - existant": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "types - type mapping": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "types - inference": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "types - alegbraic": {
      "traitScalar": 2,
      "comment": "",
      "value": 2,
      "category": "correctness"
    },
    "types - completeness": {
      "traitScalar": 3,
      "comment": "you can mix ts/js, but it's not what is observed in practice at user level. package level source language variance is high, with plenty of JS deps",
      "value": 2,
      "category": "correctness"
    },
    "types - advanced (dependent, hkt, etc)": {
      "traitScalar": 1,
      "comment": "",
      "value": 1,
      "category": "correctness"
    },
    "types - structual": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "types - nominal": {
      "traitScalar": 1,
      "comment": "branding is easy, but 3p",
      "value": 2,
      "category": "correctness"
    },
    "paradigm - functional": {
      "traitScalar": 0,
      "comment": "fp is harder without hkt",
      "value": 2,
      "category": "developer ux"
    },
    "paradigm - procedural": {
      "traitScalar": 0,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "paradigm - oop": {
      "traitScalar": 0,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "meta-programming": {
      "traitScalar": 1,
      "comment": "",
      "value": 0,
      "category": "developer ux"
    },
    "debugger": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - syntax": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - launch": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - completions": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - task execution": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "learning - teachable": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "learning - accessible": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "project - hydration/bootstrap": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "efficent machine code": {
      "traitScalar": 3,
      "comment": "",
      "value": "na",
      "category": "performance"
    },
    "efficent bytecode code": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "performance"
    },
    "abstractions - memory cost": {
      "traitScalar": 3,
      "comment": "astractions often cost objects, but fancy types can reduce weight",
      "value": 2,
      "category": "performance"
    },
    "abstractions - cpu cost": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "performance"
    },
    "common compile duration": {
      "traitScalar": 1,
      "comment": "",
      "value": 2,
      "category": "performance"
    },
    "batteries - standard modules": {
      "traitScalar": 1,
      "comment": "",
      "value": 1,
      "category": "developer ux"
    },
    "batteries - testing": {
      "traitScalar": 1,
      "comment": "none, but clear 3p winners",
      "value": 1,
      "category": "developer ux"
    },
    "batteries - project/repo management": {
      "traitScalar": 2,
      "comment": "unmatched, npm + scripts + deps",
      "value": 3,
      "category": "developer ux"
    },
    "batteries - packaging & distribution": {
      "traitScalar": 3,
      "comment": "unmatched",
      "value": 3,
      "category": "ecosystem"
    },
    "module abundance": {
      "traitScalar": 3,
      "comment": "unmatched",
      "value": 3,
      "category": "ecosystem"
    },
    "support - community": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "community"
    },
    "support - enterprise": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "community"
    },
    "tooling - builds": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "tooling - ci/cd": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "tooling - asset management": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "maturity": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "hiring availability": {
      "traitScalar": 2,
      "comment": "",
      "value": 2,
      "category": "hiring"
    }
  },
  "rust": {
    "modeled fallibility": {
      "traitScalar": 3,
      "comment": "universal monadic impls",
      "value": 3,
      "category": "correctness"
    },
    "memory safety - compile time": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "memory safety - run time": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "collection transforms (e.g. functional operators, functor, iter streams/xforms, etc)": {
      "traitScalar": 2,
      "comment": "entirely unmatched iter tooling with extremely productive and capable batteries",
      "value": 3,
      "category": "correctness"
    },
    "laziness": {
      "traitScalar": 1,
      "comment": "async naturally lazy, generators, ...mainly opt in",
      "value": 2,
      "category": "correctness"
    },
    "types - existant": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "types - type mapping": {
      "traitScalar": 1,
      "comment": "there, less ergo: https://stackoverflow.com/a/67532477/1438908",
      "value": 2,
      "category": "correctness"
    },
    "types - inference": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "types - alegbraic": {
      "traitScalar": 2,
      "comment": "https://stackoverflow.com/questions/45065518/how-to-show-that-the-rust-type-system-supports-algebraic-data-types-adts, but standard algebraic operations are not as easily expressable as FP",
      "value": 1,
      "category": "correctness"
    },
    "types - completeness": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "types - advanced (dependent, hkt, etc)": {
      "traitScalar": 1,
      "comment": "???",
      "value": 1,
      "category": "correctness"
    },
    "types - structual": {
      "traitScalar": 1,
      "comment": "https://beachape.com/blog/2021/05/25/structural-typing-in-rust/",
      "value": 0,
      "category": "correctness"
    },
    "types - nominal": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "paradigm - functional": {
      "traitScalar": 0,
      "comment": "",
      "value": 2,
      "category": "developer ux"
    },
    "paradigm - procedural": {
      "traitScalar": 0,
      "comment": "",
      "value": 2,
      "category": "developer ux"
    },
    "paradigm - oop": {
      "traitScalar": 0,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "meta-programming": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "debugger": {
      "traitScalar": 1,
      "comment": "",
      "value": 1,
      "category": "developer ux"
    },
    "ide - syntax": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - launch": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - completions": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - task execution": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "learning - teachable": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "learning - accessible": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "project - hydration/bootstrap": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "efficent machine code": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "performance"
    },
    "efficent bytecode code": {
      "traitScalar": 2,
      "comment": "",
      "value": "na",
      "category": "performance"
    },
    "abstractions - memory cost": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "performance"
    },
    "abstractions - cpu cost": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "performance"
    },
    "common compile duration": {
      "traitScalar": 1,
      "comment": "",
      "value": 1,
      "category": "performance"
    },
    "batteries - standard modules": {
      "traitScalar": 1,
      "comment": "",
      "value": 2,
      "category": "developer ux"
    },
    "batteries - testing": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "batteries - project/repo management": {
      "traitScalar": 2,
      "comment": "",
      "value": 2,
      "category": "developer ux"
    },
    "batteries - packaging & distribution": {
      "traitScalar": 3,
      "comment": "",
      "value": 2,
      "category": "ecosystem"
    },
    "module abundance": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "support - community": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "community"
    },
    "support - enterprise": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "community"
    },
    "tooling - builds": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "tooling - ci/cd": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "tooling - asset management": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "maturity": {
      "traitScalar": 2,
      "comment": "",
      "value": 2,
      "category": "ecosystem"
    },
    "hiring availability": {
      "traitScalar": 2,
      "comment": "",
      "value": 1,
      "category": "hiring"
    }
  },
  "python": {
    "modeled fallibility": {
      "traitScalar": 3,
      "comment": "None, exception",
      "value": 2,
      "category": "correctness"
    },
    "memory safety - compile time": {
      "traitScalar": 3,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "memory safety - run time": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "collection transforms (e.g. functional operators, functor, iter streams/xforms, etc)": {
      "traitScalar": 2,
      "comment": "procedural loops and comprehensions only, weak functional iter capabilities. itertools package common, but pales in comparison to other langs",
      "value": 1,
      "category": "correctness"
    },
    "laziness": {
      "traitScalar": 1,
      "comment": "",
      "value": 1,
      "category": "correctness"
    },
    "types - existant": {
      "traitScalar": 3,
      "comment": "typings module is inadequate for all entirely non-trival typing, that it's existence, presence is extremely week",
      "value": 0,
      "category": "correctness"
    },
    "types - type mapping": {
      "traitScalar": 1,
      "comment": "",
      "value": 0,
      "category": "correctness"
    },
    "types - inference": {
      "traitScalar": 2,
      "comment": "",
      "value": 0,
      "category": "correctness"
    },
    "types - alegbraic": {
      "traitScalar": 2,
      "comment": "",
      "value": 0,
      "category": "correctness"
    },
    "types - completeness": {
      "traitScalar": 3,
      "comment": "",
      "value": 0,
      "category": "correctness"
    },
    "types - advanced (dependent, hkt, etc)": {
      "traitScalar": 1,
      "comment": "",
      "value": 0,
      "category": "correctness"
    },
    "types - structual": {
      "traitScalar": 1,
      "comment": "",
      "value": 0,
      "category": "correctness"
    },
    "types - nominal": {
      "traitScalar": 1,
      "comment": "",
      "value": 0,
      "category": "correctness"
    },
    "paradigm - functional": {
      "traitScalar": 0,
      "comment": "",
      "value": 1,
      "category": "developer ux"
    },
    "paradigm - procedural": {
      "traitScalar": 0,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "paradigm - oop": {
      "traitScalar": 0,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "meta-programming": {
      "traitScalar": 1,
      "comment": "",
      "value": 0,
      "category": "developer ux"
    },
    "debugger": {
      "traitScalar": 1,
      "comment": "",
      "value": 2,
      "category": "developer ux"
    },
    "ide - syntax": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - launch": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - completions": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - task execution": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "learning - teachable": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "learning - accessible": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "project - hydration/bootstrap": {
      "traitScalar": 1,
      "comment": "",
      "value": 2,
      "category": "developer ux"
    },
    "efficent machine code": {
      "traitScalar": 3,
      "comment": "",
      "value": "na",
      "category": "performance"
    },
    "efficent bytecode code": {
      "traitScalar": 2,
      "comment": "",
      "value": 1,
      "category": "performance"
    },
    "abstractions - memory cost": {
      "traitScalar": 3,
      "comment": "abstractions = classes",
      "value": 1,
      "category": "performance"
    },
    "abstractions - cpu cost": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "performance"
    },
    "common compile duration": {
      "traitScalar": 1,
      "comment": "",
      "value": "na",
      "category": "performance"
    },
    "batteries - standard modules": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "batteries - testing": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "batteries - project/repo management": {
      "traitScalar": 2,
      "comment": "setup.py, non std impl patterns",
      "value": 1,
      "category": "developer ux"
    },
    "batteries - packaging & distribution": {
      "traitScalar": 3,
      "comment": "famously non std toolkits (requirements, pip-lock, etc)",
      "value": 1,
      "category": "ecosystem"
    },
    "module abundance": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "support - community": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "community"
    },
    "support - enterprise": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "community"
    },
    "tooling - builds": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "tooling - ci/cd": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "tooling - asset management": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "maturity": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "hiring availability": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "hiring"
    }
  },
  "java": {
    "modeled fallibility": {
      "traitScalar": 3,
      "comment": "null, Exception",
      "value": 2,
      "category": "correctness"
    },
    "memory safety - compile time": {
      "traitScalar": 3,
      "comment": "",
      "value": "na",
      "category": "correctness"
    },
    "memory safety - run time": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "collection transforms (e.g. functional operators, functor, iter streams/xforms, etc)": {
      "traitScalar": 2,
      "comment": "diverse selection of iter tooling, including streams() intfcs, but lesser than the competion",
      "value": 2,
      "category": "correctness"
    },
    "laziness": {
      "traitScalar": 1,
      "comment": "",
      "value": 1,
      "category": "correctness"
    },
    "types - existant": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "types - type mapping": {
      "traitScalar": 1,
      "comment": "https://docs.oracle.com/javase/tutorial/java/generics/index.html",
      "value": 0,
      "category": "correctness"
    },
    "types - inference": {
      "traitScalar": 2,
      "comment": "",
      "value": 2,
      "category": "correctness"
    },
    "types - alegbraic": {
      "traitScalar": 2,
      "comment": "",
      "value": 0,
      "category": "correctness"
    },
    "types - completeness": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "types - advanced (dependent, hkt, etc)": {
      "traitScalar": 1,
      "comment": "",
      "value": 0,
      "category": "correctness"
    },
    "types - structual": {
      "traitScalar": 1,
      "comment": "",
      "value": 0,
      "category": "correctness"
    },
    "types - nominal": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "correctness"
    },
    "paradigm - functional": {
      "traitScalar": 0,
      "comment": "",
      "value": 1,
      "category": "developer ux"
    },
    "paradigm - procedural": {
      "traitScalar": 0,
      "comment": "",
      "value": 1,
      "category": "developer ux"
    },
    "paradigm - oop": {
      "traitScalar": 0,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "meta-programming": {
      "traitScalar": 1,
      "comment": "",
      "value": 2,
      "category": "developer ux"
    },
    "debugger": {
      "traitScalar": 1,
      "comment": "",
      "value": 2,
      "category": "developer ux"
    },
    "ide - syntax": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - launch": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - completions": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "ide - task execution": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "learning - teachable": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "learning - accessible": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "project - hydration/bootstrap": {
      "traitScalar": 1,
      "comment": "",
      "value": 1,
      "category": "developer ux"
    },
    "efficent machine code": {
      "traitScalar": 3,
      "comment": "",
      "value": "na",
      "category": "performance"
    },
    "efficent bytecode code": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "performance"
    },
    "abstractions - memory cost": {
      "traitScalar": 3,
      "comment": "",
      "value": 1,
      "category": "performance"
    },
    "abstractions - cpu cost": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "performance"
    },
    "common compile duration": {
      "traitScalar": 1,
      "comment": "",
      "value": 2,
      "category": "performance"
    },
    "batteries - standard modules": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "developer ux"
    },
    "batteries - testing": {
      "traitScalar": 1,
      "comment": "none, but clear 3p winners",
      "value": 1,
      "category": "developer ux"
    },
    "batteries - project/repo management": {
      "traitScalar": 2,
      "comment": "swaths of metadata, oft ide driven for common project. present, but compare to others",
      "value": 1,
      "category": "developer ux"
    },
    "batteries - packaging & distribution": {
      "traitScalar": 3,
      "comment": "",
      "value": 2,
      "category": "ecosystem"
    },
    "module abundance": {
      "traitScalar": 3,
      "comment": "https://vegibit.com/wp-content/uploads/2018/05/npm-package-counts.png",
      "value": 2,
      "category": "ecosystem"
    },
    "support - community": {
      "traitScalar": 3,
      "comment": "",
      "value": 3,
      "category": "community"
    },
    "support - enterprise": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "community"
    },
    "tooling - builds": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "tooling - ci/cd": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "tooling - asset management": {
      "traitScalar": 1,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "maturity": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "ecosystem"
    },
    "hiring availability": {
      "traitScalar": 2,
      "comment": "",
      "value": 3,
      "category": "hiring"
    }
  }
}